@page "/ConsultaClientes"
@page "/ConsultaClientes/{I:int}"


@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <div class="card text-center">
                <div class="card-header">
                    No Autorizado
                </div>
                <div class="card-body">
                    <h5 class="card-title">Atención</h5>
                    <p class="card-text">Usted no está autorizado para acceder a esta pagina.</p>
                    <a href="MenuConsultas" class="btn btn-primary">Ir al Menú</a>
                </div>
                <div class="card-footer text-muted">
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
    . {
    }

        .Azul {
            color: #0094ff;
        }
</style>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <h3>Consulta de Clientes</h3>


    <div class="form-row">

        <div class="col">
            <input type="text" class="form-control" placeholder="Criterio" @onfocusin="Filtrar" @onfocusout="Filtrar" @onclick="Filtrar" @bind="Criterio" />
        </div>

        <div class="col">
            <select class="form-control" @onclick="Filtrar" @bind="filtro">
                <option value="0">Todos</option>
                <option value="1">Id</option>
                <option value="2">Nombres</option>
                <option value="3">Apellidos</option>
                <option value="4">Teléfono o celular</option>
                <option value="5">Dirección</option>
            </select>
        </div>
    </div>
    <br />

    @if (Lista == null)
    {
        <p>No hay datos que mostrar</p>
        return;
    }
    else
    {
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Apellidos</th>
                    <th>Numero</th>
                    <th>Dirección</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Lista)
                {
                    <tr>
                        <td>@item.ClienteId</td>
                        <td>@item.Nombres</td>
                        <td>@item.Apellidos</td>
                        <td>@item.Numero</td>
                        <td>@item.Direccion</td>
                        <td><a class="btn btn-outline-info" href="Clientes/@item.ClienteId">Ver</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }


    <nav aria-label="...">
        <ul class="pagination pagination-lg">
            @for (int i = 1; i <= totaldepaginas; i++)
            {
                <li class="page-item Azul"><a class="page-link Azul" @onclick="OnInitialized" href="ConsultaClientes/@i">@i</a></li>
            }
            <li class="page-item Azul"><a class="page-link Azul" @onclick="Saltar"> ► </a></li>
        </ul>
    </nav>
}


@code {

    List<Clientes> Lista = new List<Clientes>();

    [Parameter]
    public int I { get; set; }

    double conteo = 0;
    double totaldepaginas = 0;
    Contexto contexto = new Contexto();
    Paginacion paginacion = new Paginacion();
    public int Contador { get; set; }

    protected override void OnInitialized()
    {
        conteo = contexto.Clientes.Count();
        totaldepaginas = Math.Ceiling(conteo / paginacion.CantidadMostrar);
        Lista = clientescontollers.GetList(A => true);
        this.Lista = contexto.Clientes.Take(paginacion.CantidadMostrar).ToList();
        NumSaltar();
    }

    private void NumSaltar()
    {
        Contador = I - 1;
        Saltar();
    }

    private void Saltar()
    {
        Contador += paginacion.Pagina;
        if (Contador >= totaldepaginas)
        {
            Contador = 0;
        }

        Lista = contexto.Clientes
            .Skip(Contador * paginacion.CantidadMostrar)
            .Take(paginacion.CantidadMostrar)
            .ToList();
    }



    private string filtro;
    private string Criterio;



    public List<Clientes> listado { get; set; }


    private void Filtrar()
    {

        try
        {
            int filtroIndex = Int32.Parse(filtro);


            if (Criterio.Trim().Length > 0)
            {
                switch (filtroIndex)
                {
                    //Todos
                    case 0:
                        conteo = contexto.Clientes.Count();
                        totaldepaginas = Math.Ceiling(conteo / paginacion.CantidadMostrar);
                        Lista = clientescontollers.GetList(A => true);
                        this.Lista = contexto.Clientes.Take(paginacion.CantidadMostrar).ToList();
                        break;
                    //Id
                    case 1:
                        int id = 0;
                        if (int.TryParse(Criterio, out id))
                        {
                            id = Convert.ToInt32(Criterio);
                            listado = clientescontollers.GetList(p => p.ClienteId == id);
                            Lista = listado;
                        }
                        break;
                    //Nombres
                    case 2:
                        listado = clientescontollers.GetList(p => p.Nombres.Contains(Criterio));
                        Lista = listado;
                        break;

                    //Cantidas
                    case 3:

                        listado = clientescontollers.GetList(p => p.Apellidos.Contains(Criterio));
                        Lista = listado;

                        break;
                    //El telefono o el celular
                    case 4:

                        listado = clientescontollers.GetList(p => p.Numero.Contains(Criterio));
                        Lista = listado;

                        break;
                    //PorcentajeGanancias
                    case 5:
                        listado = clientescontollers.GetList(p => p.Apellidos.Contains(Criterio));
                        Lista = listado;
                        break;

                }
            }
            else
            {
                listado = clientescontollers.GetList(p => true);
                Lista = listado;
            }

        }
        catch (Exception)
        {
            //papichulo
        }
    }

}
