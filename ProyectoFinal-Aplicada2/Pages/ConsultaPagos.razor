@page "/ConsultaPagos"
@page  "/ConsultaPagos/{I:int}"

@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <div class="card text-center">
                <div class="card-header">
                    No Autorizado
                </div>
                <div class="card-body">
                    <h5 class="card-title">Atención</h5>
                    <p class="card-text">Usted no está autorizado para acceder a esta pagina.</p>
                    <a href="MenuConsultas" class="btn btn-primary">Ir al Menú</a>
                </div>
                <div class="card-footer text-muted">
                </div>
            </div>
        </NotAuthorized>
        <Authorized>
            @if (NivelDeUsuario)
            {
                <div class="card text-center">
                    <div class="card-header">
                        No Autorizado
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Atención</h5>
                        <p class="card-text">Usted no tiene nivel suficiente para acceder aquí.</p>
                        <a href="MenuRegistros" class="btn btn-primary">Ir al Menú</a>
                    </div>
                    <div class="card-footer text-muted">
                    </div>
                </div>
            }

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
    . {
    }

        .Azul {
            color: #0094ff;
        }
</style>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && NivelDeUsuario == false)
{
    <h3>Consulta de Pagos</h3>
    <div class="form-row">

        <div class="col">
            <input id="desde_date" class="form-control" type="datetime-local" @bind="desdeFecha" />
            <label for="desde_date">Desde</label>
        </div>
        <div class="col">
            <input id="hasta_date" class="form-control" type="datetime-local" @bind="hastaFecha" />
            <label for="hasta_date">Hasta</label>
        </div>

        <div class="col">
            <button class="btn btn-primary" id="filtar_buton" @onclick="filtradoPorFecha">Filtar por Fecha</button>
        </div>

        <div class="col">
            <input type="text" class="form-control" placeholder="Criterio" @onfocusin="Filtrar" @onfocusout="Filtrar" @onclick="Filtrar" @bind="Criterio" />
        </div>

        <div class="col">
            <select class="form-control" @onclick="Filtrar" @bind="filtro">
                <option value="0">Todos</option>
                <option value="1">Id</option>
                <option value="2">PagoTotal</option>
            </select>
        </div>
    </div>
    <br />


    @if (Lista == null)
    {
        <p>No hay datos que mostrar</p>
        return;
    }
    else
    {
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Fecha del Pago</th>
                    <th>Pago Total Efectuado</th>

                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Lista)
                {
                    <tr>
                        <td>@item.PagoId</td>
                        <td>@item.PagoFecha.ToString("dd/MM/yyyy")</td>
                        <td>@item.PagoTotal</td>
                        <td><a class="btn btn-outline-info" href="Pagos/@item.PagoId">Ver</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <nav aria-label="...">
        <ul class="pagination pagination-lg">
            @for (int i = 1; i <= totaldepaginas; i++)
            {
                <li class="page-item Azul"><a class="page-link Azul" @onclick="OnInitialized" href="ConsultaPagos/@i">@i</a></li>
            }
            <li class="page-item Azul"><a class="page-link Azul" @onclick="Saltar"> ► </a></li>
        </ul>
    </nav>
}

@code {
    List<Pagos> Lista = new List<Pagos>();
    double conteo = 0;
    double totaldepaginas = 0;
    Contexto contexto = new Contexto();
    Paginacion paginacion = new Paginacion();
    public int Contador { get; set; }

    [Parameter]
    public int I { get; set; }

    private bool NivelDeUsuario;
    protected override void OnInitialized()
    {
        NivelDeUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Cajero");
        conteo = contexto.Pagos.Count();
        totaldepaginas = Math.Ceiling(conteo / paginacion.CantidadMostrar);
        Lista = pagoscontroller.GetList(A => true);
        this.Lista = contexto.Pagos.Take(paginacion.CantidadMostrar).ToList();
        NumSaltar();
    }


    private void NumSaltar()
    {
        Contador = I - 1;
        Saltar();
    }

    private void Saltar()
    {
        Contador += paginacion.Pagina;
        if (Contador >= totaldepaginas)
        {
            Contador = 0;
        }

        Lista = contexto.Pagos
            .Skip(Contador * paginacion.CantidadMostrar)
            .Take(paginacion.CantidadMostrar)
            .ToList();
    }



    private string filtro;
    private string Criterio;

    DateTime hastaFecha = DateTime.Now;
    DateTime desdeFecha = DateTime.Now;

    public List<Pagos> listado { get; set; }

    private void filtradoPorFecha()
    {
        try
        {
            Lista = Lista.Where(p => p.PagoFecha >= desdeFecha && p.PagoFecha <= hastaFecha).ToList();
        }
        catch (Exception)
        {

            //wey klok
        }

    }

    private void Filtrar()
    {

        try
        {
            int filtroIndex = Int32.Parse(filtro);

            if (Criterio.Trim().Length > 0)
            {
                switch (filtroIndex)
                {
                    //Todos
                    case 0:
                        conteo = contexto.Pagos.Count();
                        totaldepaginas = Math.Ceiling(conteo / paginacion.CantidadMostrar);
                        Lista = pagoscontroller.GetList(A => true);
                        this.Lista = contexto.Pagos.Take(paginacion.CantidadMostrar).ToList();
                        break;
                    //Id
                    case 1:
                        int id = 0;
                        if (int.TryParse(Criterio, out id))
                        {
                            id = Convert.ToInt32(Criterio);
                            listado = pagoscontroller.GetList(p => p.PagoId == id);
                            Lista = listado;
                        }
                        break;
                    //PagoTotal
                    case 2:
                        decimal pagototal = 0;
                        if (decimal.TryParse(Criterio, out pagototal))
                        {
                            pagototal = Convert.ToDecimal(Criterio);
                            listado = pagoscontroller.GetList(p => p.PagoTotal == pagototal);
                            Lista = listado;
                        }
                        break;
                }
            }
            else
            {
                listado = pagoscontroller.GetList(p => true);
                Lista = listado;
            }

        }
        catch (Exception)
        {
            //papichulo
        }
    }

}