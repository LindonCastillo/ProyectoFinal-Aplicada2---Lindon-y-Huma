@page "/Usuarios"
@page "/Usuarios/{Id:int}"

@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView>

       
        <NotAuthorized>
            <div class="card text-center">
                <div class="card-header">
                    No Autorizado
                </div>
                <div class="card-body">
                    <h5 class="card-title">Atención</h5>
                    <p class="card-text">Usted no está autorizado para acceder a esta pagina.</p>
                    <a href="MenuRegistros" class="btn btn-primary">Ir al Menú</a>
                </div>
                <div class="card-footer text-muted">
                </div>
            </div>
        </NotAuthorized>

        <Authorized>
            @if (!NivelDeUsuario)
            {
               <p class="text-center">No tienes el nivel de usuario suficiente</p>
            }

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>


<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .form-register {
        width: 500px;
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        padding: 30px;
        margin: auto;
        margin-top: 50px;
        border-radius: 4px;
        font-family: 'calibri';
        color: white;
        box-shadow: 7px 13px 37px #000;
    }

    .h3 {
        color: white;
    }
</style>

@if(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated&&NivelDeUsuario)
{
    <section class="form-register">
        <h3>Usuarios</h3>
        <EditForm Model="@usuarios" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <label for="Id">UsuarioId</label>
            <div>
                <div class="input-group">
                    <InputNumber @bind-Value="usuarios.UsuarioId" class="form-control"></InputNumber>
                    <ValidationMessage For="(() => usuarios.UsuarioId)"></ValidationMessage>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                        <div />
                        <div />
                        <div />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="NombrePersona_text">Nombre</label>
                <InputText id="NombrePersona_text" placeholder="Tu nombre" class="form-control" @bind-Value="usuarios.NombrePersona"></InputText>
                <ValidationMessage For="(() => usuarios.NombrePersona)" />
            </div>


            <div class="form-group">
                <label for="NombreUsuario _text">Nombre de usuario</label>
                <InputText id="NombreUsuario_text" placeholder="Nombre de usuario" class="form-control" @bind-Value="usuarios.NombreUsuario"></InputText>
                <ValidationMessage For="(() => usuarios.NombreUsuario)" />
            </div>
            <div class="form-group">
                <label for="EmailUsuario_text">Email</label>
                <InputText id="EmailUsuario_text" class="form-control" placeholder="" @bind-Value="usuarios.EmailUsuario"></InputText>
                <ValidationMessage For="(() => usuarios.EmailUsuario)" />
            </div>

            <div class="form-group">
                <label for="Clave_text">Clave</label>
                <InputText id="Clave_text" type="password" class="form-control" @bind-Value="usuarios.Clave"></InputText>
                <ValidationMessage For="(() => usuarios.Clave)" />
            </div>

            <div class="form-group">
                <label for="ConfirmarClave_text">Confirmar Clave</label>
                <InputText id="ConfirmarClave_text" type="password" class="form-control" @bind-Value="usuarios.ConfirmarClave"></InputText>
                <ValidationMessage For="(() => usuarios.ConfirmarClave)" />
            </div>

            <div class="form-group">
                <label for="nivelusuario">Nivel de Usuario</label>
                <InputSelect id="nivelusuario" class="form-control" @bind-Value="@usuarios.NivelUsuario">
                    <option value="">Elija un nivel</option>
                    <option value="Administrador">Administrador</option>
                    <option value="Contador">Contador</option>
                    <option value="Cajero">Cajero</option>
                </InputSelect>
                <ValidationMessage For="(() => usuarios.NivelUsuario)" />
            </div>

            <div class="form-group">
                <label for="FechaIngreso_date">Fecha de Ingreso</label>
                <InputDate id="FechaIngreso_date" class="form-control" @bind-Value="usuarios.FechaIngreso"></InputDate>
                <ValidationMessage For="(() => usuarios.FechaIngreso)" />
            </div>

            <div>
                <button type="button" class="btn btn-danger" @onclick="Limpiar">Nuevo</button>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="Eliminar">Eliminar</button>
            </div>
        </EditForm>
    </section>
}

<br />
<br />

@code {
    [Parameter]
    public int Id { get; set; }

    private bool NivelDeUsuario;

    Usuarios usuarios = new Usuarios();

    protected override void OnInitialized()
    {
        UsuariosControllers controller = new UsuariosControllers();
        Limpiar();
        if (Id != 0)
        {
            usuarios = controller.Buscar(Id);
        }
        NivelDeUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador");
    }

    public string Encriptar(string cadenaEncriptada)
    {
        string resultado = string.Empty;
        byte[] encryted = System.Text.Encoding.Unicode.GetBytes(cadenaEncriptada);
        resultado = Convert.ToBase64String(encryted);

        return resultado;
    }

    public string DesEncriptar(string cadenaDesencriptada)
    {
        string resultado = string.Empty;
        byte[] decryted = Convert.FromBase64String(cadenaDesencriptada);
        resultado = System.Text.Encoding.Unicode.GetString(decryted);

        return resultado;
    }

    public bool ExisteEnLaBaseDeDatos(int id)
    {
        Contexto db = new Contexto();
        var buscado = db.Usuarios.Find(id);
        bool paso = true;

        if (buscado == null)
        {
            paso = false;
        }

        return paso;
    }

    private void Limpiar()
    {
        usuarios = new Usuarios();
    }

    private void Guardar()
    {
        UsuariosControllers controller = new UsuariosControllers();

        if (usuarios.ConfirmarClave != usuarios.Clave)
        {
            toastService.ShowWarning("La claves no son iguales", "No Iguales!");
            return;
        }


        if (usuarios.UsuarioId > 0)
        {
            if (ExisteEnLaBaseDeDatos(usuarios.UsuarioId))
            {
                if (controller.Guardar(usuarios))
                {
                    toastService.ShowSuccess("Se ha modificado el usaurio exitosamente", "Modificado!");
                    Limpiar();
                }
                else
                {
                    toastService.ShowError("No se pudo modificar", "Error!");
                }

            }
            else
            {
                toastService.ShowError("No se puede modificar un usuario que no existe", "Error");
            }
        }
        else
        {
            if (controller.Guardar(usuarios))
            {
                toastService.ShowSuccess("El usuario se ha guardado correctamente", "Guardado!");
                Limpiar();
            }
            else
            {
                toastService.ShowError("El usuario no se ha podigo guardar", "Error!");
            }
        }
    }

    private void Eliminar()
    {
        UsuariosControllers controller = new UsuariosControllers();
        int id = usuarios.UsuarioId;
        if (id > 0)
        {
            if (ExisteEnLaBaseDeDatos(id))
            {
                controller.Eliminar(id);
                Limpiar();
                toastService.ShowInfo("El usuario se ha eliminado correctamente", "Eliminado!");
            }
            else
            {
                toastService.ShowWarning("No se pudo eliminar el usuario", "Error!");
            }
        }

    }

    private void Buscar()
    {
        UsuariosControllers controller = new UsuariosControllers();
        var buscado = controller.Buscar(usuarios.UsuarioId);

        if (buscado != null)
        {
            usuarios = buscado;
            toastService.ShowSuccess("Se ha encontrado al usuario exitosamente", "Encontrado!");
        }
        else
        {
            toastService.ShowWarning("No se ha podido encontrar el usuario", "No encontrado!");
        }
    }
}
