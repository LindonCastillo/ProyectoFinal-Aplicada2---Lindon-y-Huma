@page "/Proveedores"
@page "/Proveedores/{Id:int}"

@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <div class="card text-center">
                <div class="card-header">
                    No Autorizado
                </div>
                <div class="card-body">
                    <h5 class="card-title">Atención</h5>
                    <p class="card-text">Usted no está autorizado para acceder a esta pagina.</p>
                    <a href="MenuRegistros" class="btn btn-primary">Ir al Menú</a>
                </div>
                <div class="card-footer text-muted">
                </div>
            </div>
        </NotAuthorized>

        <Authorized>
            @if (NivelDeUsuario)
            {
                <div class="card text-center">
                    <div class="card-header">
                        No Autorizado
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Atención</h5>
                        <p class="card-text">Usted no tiene nivel suficiente para acceder aquí.</p>
                        <a href="MenuRegistros" class="btn btn-primary">Ir al Menú</a>
                    </div>
                    <div class="card-footer text-muted">
                    </div>
                </div>
            }

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>


<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .form-register {
        width: 500px;
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        padding: 30px;
        margin: auto;
        margin-top: 50px;
        border-radius: 4px;
        font-family: 'calibri';
        color: white;
        box-shadow: 7px 13px 37px #000;
    }

    .h3 {
        color: white;
    }
</style>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && NivelDeUsuario == false)
{
    <section class="form-register">

        <h3>Proveedores</h3>
        <EditForm Model="proveedores" OnValidSubmit="Guardar">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <label for="Id">ProveedorId</label>
            <div>
                <div class="input-group">
                    <InputNumber @bind-Value="proveedores.ProveedoresId" class="form-control"></InputNumber>
                    <ValidationMessage For="(() => proveedores.ProveedoresId)"></ValidationMessage>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                        <div />
                        <div />
                        <div />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="NombreProveedor">Nombre</label>
                <InputText @bind-Value="proveedores.NombreProveedor" class="form-control"></InputText>
                <ValidationMessage For="(()=>proveedores.NombreProveedor)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="Telefono">Telefono</label>
                <InputText @bind-Value="proveedores.Telefono" class="form-control"></InputText>
                <ValidationMessage For="(()=>proveedores.Telefono)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="RNC">RNC</label>
                <InputText @bind-Value="proveedores.RNC" class="form-control"></InputText>
                <ValidationMessage For="(()=>proveedores.RNC)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="TipoNegocio">Tipo de negocio</label>
                <InputSelect @bind-Value="proveedores.TipoNegocio" class="form-control">
                    <option value="">Elija un Tipo de Proveedor</option>
                    <option value="Bienes">Bienes</option>
                    <option value="Servicios">Servicios</option>
                    <option value="Bienes y Servicios">Bienes y Servicios</option>
                </InputSelect>
                <ValidationMessage For="(()=>proveedores.TipoNegocio)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="Direccion">Dirección</label>
                <InputText @bind-Value="proveedores.Direcciones" class="form-control"></InputText>
                <ValidationMessage For="(()=>proveedores.Direcciones)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="TipoMoneda">Tipo Moneda</label>

                <InputSelect @bind-Value="proveedores.TipoMoneda" class="form-control">
                    <option value="Peso">Peso</option>
                    <option value="Dolar">Dolar</option>
                    <option value="Euro">Euro</option>
                </InputSelect>
                <ValidationMessage For="(()=>proveedores.TipoMoneda)"></ValidationMessage>
            </div>

            <button type="button" class="btn btn-secondary" @onclick="Nuevo">Nuevo</button>
            <button type="submit" class="btn btn-success">Guardar</button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>

        </EditForm>

    </section>

}

<br />
<br />

@code {

    Proveedores proveedores = new Proveedores();

    [Parameter]
    public int Id { get; set; }


    private bool NivelDeUsuario;
    protected override void OnInitialized()
    {
        if (Id > 0)
        {
            proveedores = proveedorescontrollers.Buscar(Id);
        }
        NivelDeUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Cajero");
    }

    public bool ExisteEnLaBaseDeDatos(int id)
    {
        Contexto db = new Contexto();
        var buscado = db.Proveedores.Find(id);
        bool paso = true;

        if (buscado == null)
        {

            paso = false;
        }

        return paso;
    }

    private void Guardar()
    {
        if (proveedores.ProveedoresId > 0)
        {
            if (ExisteEnLaBaseDeDatos(proveedores.ProveedoresId))
            {
                proveedorescontrollers.Guardar(proveedores);
                toastService.ShowSuccess("Has modificado el proveedor exitosamente", "Modificado!");
                this.proveedores = new Proveedores();
            }
            else
            {
                toastService.ShowError("No se puede modificar un proveedor que no existe", "No Existe!");
            }

        }
        else if (proveedores.ProveedoresId == 0)
        {
            proveedorescontrollers.Guardar(proveedores);
            toastService.ShowSuccess("Has guardado el proveedor exitosamente", "Guardado!");
            this.proveedores = new Proveedores();
        }
        else
        {
            toastService.ShowError("No se guardar", "Error!");
        }

    }

    private void Nuevo()
    {
        this.proveedores = new Proveedores();
    }

    private void Eliminar()
    {
        if (proveedorescontrollers.Eliminar(proveedores.ProveedoresId))
        {
            toastService.ShowInfo("Has eliminado el proveedor exitosamente", "Eliminado!");
            this.proveedores = new Proveedores();
        }
        else
        {
            toastService.ShowError("No se pudo eliminar", "Error");
        }
    }

    private void Buscar()
    {
        Proveedores busca = proveedorescontrollers.Buscar(proveedores.ProveedoresId);
        if (busca != null)
        {
            this.proveedores = busca;
            toastService.ShowInfo("El proveedor se ha encontrado", "Encontrado!");
        }
        else
        {
            toastService.ShowWarning("No se pudo encontrar el proveedor", "No encontrado!");
        }
    }


}
