@page "/Productos"
@page "/Productos/{Id:int}"

@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <div class="card text-center">
                <div class="card-header">
                    No Autorizado
                </div>
                <div class="card-body">
                    <h5 class="card-title">Atención</h5>
                    <p class="card-text">Usted no está autorizado para acceder a esta pagina.</p>
                    <a href="MenuRegistros" class="btn btn-primary">Ir al Menú</a>
                </div>
                <div class="card-footer text-muted">
                </div>
            </div>
        </NotAuthorized>

        <Authorized>
            @if (NivelDeUsuario)
            {
                <div class="card text-center">
                    <div class="card-header">
                        No Autorizado
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Atención</h5>
                        <p class="card-text">Usted no tiene nivel suficiente para acceder aquí.</p>
                        <a href="MenuRegistros" class="btn btn-primary">Ir al Menú</a>
                    </div>
                    <div class="card-footer text-muted">
                    </div>
                </div>
            }

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>


<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .form-register {
        width: 500px;
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        padding: 30px;
        margin: auto;
        margin-top: 50px;
        border-radius: 4px;
        font-family: 'calibri';
        color: white;
        box-shadow: 7px 13px 37px #000;
    }

    .h3 {
        color: white;
    }
</style>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && NivelDeUsuario == false)
{
    <section class="form-register">

        <h3>Productos</h3>
        <EditForm Model="productos" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <label for="Id">ProductoId</label>
            <div>
                <div class="input-group">
                    <InputNumber @bind-Value="productos.ProductoId" class="form-control"></InputNumber>
                    <ValidationMessage For="(() => productos.ProductoId)"></ValidationMessage>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                        <div />
                        <div />
                        <div />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="FechaEntrada">Fecha de entrada</label>
                <InputDate @bind-Value="productos.FechaEntrada" class="form-control"></InputDate>
                <ValidationMessage For="(()=>productos.FechaEntrada)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="Nombre">Nombre</label>
                <InputText @bind-Value="productos.Nombre" class="form-control"></InputText>
                <ValidationMessage For="(()=>productos.Nombre)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="Categoria">Categoría</label>
                <InputSelect class="form-control" @bind-Value="productos.CategoriaProducto">
                    <option value="">Elija una categoría</option>
                    @foreach (var item in ListaCategorias)
	                {
		                <option value="@item.NombreCategoria">@item.NombreCategoria</option>
	                }
                </InputSelect>
                <ValidationMessage For="(()=>productos.CategoriaProducto)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="Cantidad">Cantidad</label>
                <InputNumber @bind-Value="productos.Cantidad" class="form-control"></InputNumber>
                <ValidationMessage For="(()=>productos.Cantidad)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="PrecioCompra">Precio de compra</label>
                <InputNumber @bind-Value="productos.PrecioCompra" @onfocusin="CalcularPrecioDeVenta" @onfocusout="CalcularPrecioDeVenta" class="form-control"></InputNumber>
                <ValidationMessage For="(()=>productos.PrecioCompra)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="PorcentajeGanancia">Porcentaje de ganancia</label>
                <InputNumber @bind-Value="productos.PorcentajeGanancias" @onfocusin="CalcularPrecioDeVenta" @onfocusout="CalcularPrecioDeVenta" class="form-control"></InputNumber>
                <ValidationMessage For="(()=>productos.PorcentajeGanancias)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="PrecioVenta">Precio de venta</label>
                <InputNumber @bind-Value="productos.PrecioVentas" ReadOnly="true" class="form-control" @onchange="CalcularPrecioDeVenta"></InputNumber>
            </div>

            <button type="button" class="btn btn-secondary" @onclick="Nuevo">Nuevo</button>
            <button type="submit" class="btn btn-success" @onclick="CalcularPrecioDeVenta">Guardar</button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>

        </EditForm>
    </section>
}
<br />
<br />

@code {
    Productos productos = new Productos();

    [Parameter]
    public int Id { get; set; }

    private List<Categorias> ListaCategorias = new List<Categorias>();

    private bool NivelDeUsuario;
    protected override void OnInitialized()
    {
        if (Id > 0)
        {
            productos = productoscontrollers.Buscar(Id);
        }
        ListaCategorias = categoriascontrollers.GetList(P => true);
        NivelDeUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Cajero");
    }

    private void Nuevo()
    {
        this.productos = new Productos();
    }

    private void Guardar()
    {
        if (productos.ProductoId > 0)
        {
            productoscontrollers.Guardar(productos);
            toastService.ShowSuccess("Has modificado el producto exitosamente", "Modificado!");
            this.productos = new Productos();

        }
        else if (productos.ProductoId == 0)
        {
            productoscontrollers.Guardar(productos);
            toastService.ShowSuccess("Has guardado el producto exitosamente", "Guardado!");
            this.productos = new Productos();
        }
        else
        {
            toastService.ShowError("No se puedo guardar", "Error!");
        }

    }


    private void Eliminar()
    {
        if (productoscontrollers.Eliminar(productos.ProductoId))
        {
            toastService.ShowInfo("Se ha eliminado el producto correctamente", "Eliminado!");
            this.productos = new Productos();
        }
        else
        {
            toastService.ShowError("No se pudo eliminar", "Error!");
        }
    }

    private void Buscar()
    {
        Productos busca = productoscontrollers.Buscar(productos.ProductoId);
        if (busca != null)
        {
            this.productos = busca;
            toastService.ShowInfo("Has encontrado el producto", "Encontrado!");
        }
        else
        {
            toastService.ShowWarning("No se ha podido encontrar el producto", "No encontrado!");
        }
    }


    private void CalcularPrecioDeVenta()
    {
        productos.PrecioVentas = (productos.PrecioCompra * (productos.PorcentajeGanancias / 100)) + productos.PrecioCompra;
    }


}
