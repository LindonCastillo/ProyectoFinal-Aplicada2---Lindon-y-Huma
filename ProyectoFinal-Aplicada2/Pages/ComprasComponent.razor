@page "/Compras"
@page "/Compras/{Id:int}"


<h3>Compras</h3>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .form-register {
        width: 800px;
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        padding: 30px;
        margin: auto;
        margin-top: 100px;
        border-radius: 4px;
        font-family: 'calibri';
        color: white;
        box-shadow: 7px 13px 37px #000;
    }

    .h3 {
        color: white;
    }
    </style >

<section class="form-register">
    <h3>Compras</h3>
    <h3>@mensaje</h3>
    <EditForm Model="@compras" OnValidSubmit="Guardar">
        <DataAnnotationsValidator/>
        <label for="Id">CompraId</label>
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">

                    <InputNumber @bind-Value="compras.CompraId" class="form-control"></InputNumber>
                    <ValidationMessage For="(()=>compras.CompraId)"></ValidationMessage>
                </div>
            </div>


            <div class="col-md-4">

                <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>

            </div>
        </div>

        <div class="form-group">
            <label for="FechaCompra">Fecha de compra</label>
            <InputDate @bind-Value="compras.FechaCompra" class="form-control"></InputDate>
            <ValidationMessage For="(()=>compras.FechaCompra)"></ValidationMessage>
        </div>


        <div class="row">
            <div class="col">
                <label for="Producto">Producto</label>
                <InputSelect @bind-Value="ProductoId" @onclick="BuscarProducto" @onchange="BuscarProducto" class="form-control">
                    <option value="">Elija una opción</option>
                    @foreach (var item in listaProductos)
                    {
                        <option value="@item.ProductoId">@item.Nombre</option>
                    }
                </InputSelect>
            </div>

            <div class="col">
                <label for="Cantidad">Cantidad</label>
                <InputNumber @bind-Value="productos.Cantidad" class="form-control"></InputNumber>
            </div>

            <div class="col">
                <label for="PrecioCompra">Precio de compra</label>
                <InputNumber @bind-Value="productos.PrecioCompra" class="form-control"></InputNumber>
            </div>
            <br />
            <br />
        </div>
   
        <button class="btn btn-outline-primary" @onclick="AgregarAsignatura" type="button">Agregar</button>

        <br />
        <button class="btn btn-outline-primary" @onclick="AgregarProducto">Agregar</button>

        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>CompraId</th>
                    <th>ProductoId</th>
                    <th>Nombre</th>
                    <th>Cantidad</th>
                    <th>PrecioCompra</th>
                    <th>SubTotal</th>
                    <th></th>
                </tr>
            </thead>
            <tbody class="bg-white">
                @foreach (var item in compras.ComprasDetalles) 
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.CompraId</td>
                        <td>@item.ProductoId</td>
                        <td>@item.Nombre</td>
                        <td>@item.Cantidad</td>
                        <td>@item.PrecioCompra</td>
                        <td>@item.SubTotal</td>
                        <td><button class="btn btn-outline-danger" @onclick="(() => EliminarDetalle(item))">Remover</button></td>
                    </tr>
                }

            </tbody>

        </table>

        <div class="form-group">
            <label for="ProveedorId">ProveedorId</label>
            <InputNumber @bind-Value="compras.ProveedorId" class="form-control"></InputNumber>
            <ValidationMessage For="(()=>compras.ProveedorId)"></ValidationMessage>
        </div>


        <div class="form-group">
            <label for="ITEBIS">ITEBIS</label>
            <InputNumber @bind-Value="compras.Itbis" class="form-control"></InputNumber>
            <ValidationMessage For="(()=>compras.Itbis)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="Balance">Balance</label>
            <InputNumber @bind-Value="compras.Balance" disabled class="form-control"></InputNumber>
        </div>

        <button type="button" class="btn btn-secondary" @onclick="Nuevo">Nuevo</button>
        <button type="submit" class="btn btn-success" @onclick="CalcularTotalDeCompra">Guardar</button>
        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
    </EditForm>
</section>
@code {
    private string mensaje;
    Compras compras = new Compras();
    Productos productos = new Productos();
    List<Productos> listaProductos = new List<Productos>();
    private string ProductoId;


    [Parameter]
    public int Id { get; set; }

    protected override void OnInitialized()
    {
        if(Id>0)
        {
            compras = comprascontroller.Buscar(Id);
        }

        listaProductos = productoscontrollers.GetList(p => true);
        productos = new Productos();
    }

    private void Nuevo()
    {
        this.compras = new Compras();
        mensaje = string.Empty;
    }

    private void Guardar()
    {
        if(compras.ComprasDetalles == null)
        {
            mensaje = "La lista esta vacía";
            return;
        }


        Proveedores proveedores = new Proveedores();
        if(proveedorescontrollers.Buscar(compras.ProveedorId)==null)
        {
            mensaje = "No existe el proveedor";
        } 
        else
        {
            if(comprascontroller.Guardar(compras))
            {
                mensaje = "Guardado correctamente";
                this.compras = new Compras();
            } 
            else
            {
                mensaje = "No se pudo guardar";
            }
        }
    }

    private void Eliminar()
    {
        if(comprascontroller.Eliminar(compras.CompraId))
        {
            mensaje = "Eliminado correctamente";
            this.compras = new Compras();
        } 
        else
        {
            mensaje = "No se pudo eliminar";
        }
    }

    private void Buscar()
    {
        Compras busca = comprascontroller.Buscar(compras.CompraId);
        if (busca != null)
        {
            this.compras = busca;
            mensaje = "Encontrado correctamente";
        }
        else
        {
            mensaje = "No se pudo encontrar";
        }
    }


    private void AgregarProducto()
    {

        this.compras.ComprasDetalles.Add(new ComprasDetalle
        {
            Id = 0,
            CompraId = compras.CompraId,
            ProductoId = productos.ProductoId,
            Nombre = productos.Nombre,
            Cantidad = productos.Cantidad,
            PrecioCompra = productos.PrecioCompra,
            SubTotal = productos.Cantidad * productos.PrecioCompra
        });
    }

    private void CalcularTotalDeCompra()
    {
        compras.Balance = PrecioCompra * Cantidad;
    }

    private void EliminarDetalle(ComprasDetalle detalle)
    {
        try
        {
            compras.ComprasDetalles.Remove(detalle);
        }
        catch (Exception)
        {

    private void BuscarProducto()
    {
        try
        {
           productos = productoscontrollers.Buscar(Int32.Parse(ProductoId));
        }catch
        {
            //sdfsd
        }

            //
        }
    }

}
