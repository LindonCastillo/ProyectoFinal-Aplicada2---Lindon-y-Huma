@page "/ConsultaCompras"
@page "/ConsultaCompras/{I:int}"

<h3>Consulta de Compras</h3>

<div class="form-row">

    <div class="col">
        <input id="desde_date" class="form-control" type="datetime-local" @bind="desdeFecha" />
        <label for="desde_date">Desde</label>
    </div>
    <div class="col">
        <input id="hasta_date" class="form-control" type="datetime-local" @bind="hastaFecha" />
        <label for="hasta_date">Hasta</label>
    </div>

    <div class="col">
        <button class="btn btn-primary" id="filtar_buton" @onclick="filtradoPorFecha">Filtar por Fecha</button>
    </div>
    <div class="col">
        <button class="btn btn-dark" type="button" @onclick="Saltar">Pag. Siguiente</button>
    </div>
    <div class="col">
        <input type="text" class="form-control" placeholder="Criterio" @onfocusin="Filtrar" @onfocusout="Filtrar" @onclick="Filtrar" @bind="Criterio" />
    </div>

    <div class="col">
        <select class="form-control" @onclick="Filtrar" @bind="filtro">
            <option value="0">Todos</option>
            <option value="1">Id</option>
            <option value="2">ProveedorId</option>
            <option value="3">Itbis</option>
            <option value="4">Balance</option>
            <option value="5">Descripción</option>
        </select>
    </div>
</div>
<br />

@if (Lista == null)
{
    <p>No hay datos que mostrar</p>
    return;
}
else
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th>Id</th>
                <th>Fecha de compra</th>
                <th>Proveedor</th>
                <th>Itbis</th>
                <th>Descripción</th>
                <th>Balance</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Lista)
            {
                <tr>
                    <td>@item.CompraId</td>
                    <td>@item.FechaCompra.ToString("dd/MM/yyyy")</td>
                    <td>@comprascontroller.ObtenerNombreProveedor(item.ProveedorId)</td>
                    <td>@item.Itbis</td>
                    <td>@item.DescripcionCompra</td>
                    <td>@item.Balance</td>
                    <td><a class="btn btn-outline-info" href="Compras/@item.CompraId">Ver</a></td>
                </tr>
            }
        </tbody>
    </table>
}

<nav aria-label="...">
    <ul class="pagination pagination-lg">
        @for (int i = 1; i <= totaldepaginas; i++)
        {
            <li class="page-item"><a class="page-link" @onclick="OnInitialized" href="ConsultaCompras/@i">@i</a></li>
        }

    </ul>
</nav>

@code {
    List<Compras> Lista = new List<Compras>();
    List<Compras> listacompra = new List<Compras>();

    Contexto contexto = new Contexto();

    Proveedores proveedor = new Proveedores();

    [Parameter]
    public int I { get; set; }
    private int Contador { get; set; }
    private int contCiclo { get; set; }

    Paginacion paginacion = new Paginacion();
    public double totaldepaginas { get; set; }

    double conteo = 0;

    protected override void OnInitialized()
    {
        try
        {
            conteo = contexto.Compras.Count();
            totaldepaginas = Math.Ceiling(conteo/paginacion.CantidadMostrar);
            Lista = comprascontroller.GetList(p => true);
            this.Lista = contexto.Compras.Take(paginacion.CantidadMostrar).ToList();
            NumSaltar();
        }
        catch (Exception)
        {

            //
        }
    }

    private void NumSaltar()
    {
        Contador = I - 1;
        Saltar();
    }

    private void Saltar()
    {
        Contador += paginacion.Pagina;
        if(Contador >= totaldepaginas)
        {
            Contador = 0;
        }
        Lista = contexto.Compras
            .Skip(Contador * paginacion.CantidadMostrar)
            .Take(paginacion.CantidadMostrar)
            .ToList();
    }

    private string filtro;
    private string Criterio;
    private bool fechaFiltro;

    DateTime hastaFecha = DateTime.Now;
    DateTime desdeFecha = DateTime.Now;


    public List<Compras> listado { get; set; }

    private void filtradoPorFecha()
    {
        try
        {
            Lista = Lista.Where(p => p.FechaCompra >= desdeFecha && p.FechaCompra <= hastaFecha).ToList();
        }
        catch (Exception)
        {

            //wey klok
        }

    }

    private void Filtrar()
    {

        try
        {
            int filtroIndex = Int32.Parse(filtro);

            if (Criterio.Trim().Length > 0)
            {
                switch (filtroIndex)
                {
                    //Todos
                    case 0:
                        listado = comprascontroller.GetList(p => true);
                        Lista = listado;
                        break;
                    //Int
                    case 1:
                        int id = 0;
                        if (int.TryParse(Criterio, out id))
                        {
                            id = Convert.ToInt32(Criterio);
                            listado = comprascontroller.GetList(p => p.CompraId == id);
                            Lista = listado;
                        }
                        break;
                    //ProveedorId
                    case 2:
                        int id2 = 0;
                        if (int.TryParse(Criterio, out id2))
                        {
                            id2 = Convert.ToInt32(Criterio);
                            listado = comprascontroller.GetList(p => p.ProveedorId == id2);
                            Lista = listado;
                        }
                        break;
                    //Itbis
                    case 3:
                        decimal Itbis = 0;
                        if (decimal.TryParse(Criterio, out Itbis))
                        {
                            Itbis = Convert.ToDecimal(Criterio);
                            listado = comprascontroller.GetList(p => p.Itbis == Itbis);
                            Lista = listado;
                        }
                        break;
                    //Balance
                    case 4:
                        decimal balance = 0;
                        if (decimal.TryParse(Criterio, out balance))
                        {
                            balance = Convert.ToDecimal(Criterio);
                            listado = comprascontroller.GetList(p => p.Balance == balance);
                            Lista = listado;
                        }
                        break;
                    case 5:
                        {

                            listado = comprascontroller.GetList(p => p.DescripcionCompra.Contains(Criterio));;
                            Lista = listado;
                        }
                        break;
                }
            }
            else
            {
                listado = comprascontroller.GetList(p => true);
                Lista = listado;
            }

        }
        catch (Exception)
        {
            //papichulo
        }
    }

}



