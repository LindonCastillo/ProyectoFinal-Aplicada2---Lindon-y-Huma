@page "/TipoProductos"
@page "/TiposProductos/{Id:int}"



@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <div class="card text-center">
                <div class="card-header">
                    No Autorizado
                </div>
                <div class="card-body">
                    <h5 class="card-title">Atención</h5>
                    <p class="card-text">Usted no está autorizado para acceder a esta pagina.</p>
                    <a href="MenuRegistros" class="btn btn-primary">Ir al Menú</a>
                </div>
                <div class="card-footer text-muted">
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .form-register {
        width: 500px;
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        padding: 30px;
        margin: auto;
        margin-top: 50px;
        border-radius: 4px;
        font-family: 'calibri';
        color: white;
        box-shadow: 7px 13px 37px #000;
    }

    .h3 {
        color: white;
    }
</style>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
<section class="form-register">
    <h3>Tipos de Productos</h3>
    <EditForm Model="tipoProductos" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="row">
            <label for="Id">TipoProductoId</label>
        </div>
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">

                    <InputNumber @bind-Value="tipoProductos.TipoProductoId" class="form-control"></InputNumber>
                    <ValidationMessage For="(()=>tipoProductos.TipoProductoId)"></ValidationMessage>
                </div>
            </div>


            <div class="col-md-4">

                <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>

            </div>
        </div>

        <div class="form-group">
            <label for="ProductoSeleccionado">Producto</label>
            <InputSelect @bind-Value="tipoProductos.ProductoSeleccionado" class="form-control">
                <option value="">Elija un producto</option>
                @foreach (var item in ListaProductos)
	            {
		            <option value="@item.Nombre">@item.Nombre</option>
	            }
            </InputSelect>
            <ValidationMessage For="(()=>tipoProductos.ProductoSeleccionado)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="TipoProducto">Categoría</label>
            <InputSelect @bind-Value="tipoProductos.Categoria" class="form-control">
                <option value="">Elija una opción</option>
                <option value="Tóxico">Tóxico</option>
                <option value="No tóxico">No tóxico</option>
            </InputSelect>
            <ValidationMessage For="(()=>tipoProductos.Categoria)"></ValidationMessage>
        </div>


        <button type="button" class="btn btn-secondary" @onclick="Nuevo">Nuevo</button>
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
    </EditForm>
    
</section>

}



@code {
    [Parameter]
    public int Id { get; set; }

    TipoProductos tipoProductos = new TipoProductos();
    List<Productos> ListaProductos = new List<Productos>();

    Productos productos = new Productos();

    protected override void OnInitialized()
    {
        if (Id > 0)
        {
            tipoProductos = tiposproductoscontrollers.Buscar(Id);
        }

        ListaProductos = productoscontrollers.GetList(p => true);

    }

    private void Guardar()
    {
        if (tipoProductos.TipoProductoId > 0)
        {
            tiposproductoscontrollers.Guardar(tipoProductos);
            toastService.ShowSuccess("Has modificado el tipo de producto exitosamente", "Modificado!");
            Nuevo();
        }
        else if (tipoProductos.TipoProductoId == 0)
        {
            tiposproductoscontrollers.Guardar(tipoProductos);
            toastService.ShowSuccess("Has guardado el tipo de producto exitosamente", "Guardado!");
            Nuevo();
        }
        else
        {
            toastService.ShowWarning("No se pudo guardar el tipo de producto", "Error!");
        }

    }

    private void Nuevo()
    {
        this.tipoProductos = new TipoProductos();
    }

    private void Eliminar()
    {
        if (tiposproductoscontrollers.Eliminar(tipoProductos.TipoProductoId))
        {
            toastService.ShowInfo("Has eliminado al tipo de producto exitosamente", "Eliminado!");
            Nuevo();
        }
        else
        {
            toastService.ShowError("No se pudo eliminar el tipo de producto", "Error!");
        }
    }

    private void Buscar()
    {
        TipoProductos busca = tiposproductoscontrollers.Buscar(tipoProductos.TipoProductoId);
        if (busca != null)
        {
            this.tipoProductos = busca;
            toastService.ShowInfo("Has encontrado el tipo de producto", "Encontrado!");
        }
        else
        {
            toastService.ShowWarning("No se pudo encontrar el tipo de producto", "No encontrado!");
        }
    }

}
