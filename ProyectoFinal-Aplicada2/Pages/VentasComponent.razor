@page "/Ventas"
@page "/Ventas/{Id:int}"


<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .form-register {
        width: 800px;
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        padding: 30px;
        margin: auto;
        margin-top: 100px;
        border-radius: 4px;
        font-family: 'calibri';
        color: white;
        box-shadow: 7px 13px 37px #000;
    }

    .h3 {
        color: white;
    }
</style>

<section class="form-register">
    <h3>Ventas</h3>
    <h3 class="form-text text-muted">@mensaje</h3>
    <EditForm Model="@ventas" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <label for="Id">VentaId</label>
                    <InputNumber id="id" @bind-Value="ventas.VentaId" class="form-control"></InputNumber>
                    <ValidationMessage For="(()=>ventas.VentaId)"></ValidationMessage>
                </div>
            </div>

            <div class="col-md-4">

                <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>

            </div>
        </div>

        <div class="form-group">
            <label for="Fechaventa">Fecha de Venta</label>
            <InputDate id="Fechaventa" @bind-Value="ventas.FechaVenta" class="form-control"></InputDate>
            <ValidationMessage For="(()=>ventas.FechaVenta)"></ValidationMessage>
        </div>

        <button class="btn btn-outline-primary" @onclick="AgregarProducto">Agregar</button>

        <div class="row">
            <div class="col">
                <label for="producto_select">Producto</label>
                <InputSelect id="producto_select" @bind-Value="@seleccionado" @onchange="CargarProducto" @onclick="CargarProducto" class="form-control">
                    @foreach (var item in MiLista)
                    {
                        <option value="@item.ProductoId">@item.Nombre</option>
                    }
                </InputSelect>
            </div>
            <div class="col">
                <label for="descripcion">Descripcion</label>
                <InputText id="descripcion" class="form-control" @bind-Value="nombre" disabled ></InputText>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <label for="cantidad">Cantidad</label>
                <InputNumber id="cantidad" class="form-control" @bind-Value="cantidad"></InputNumber>
            </div>
            <div class="col">
                <label for="precio">Precio</label>
                <InputNumber id="precio" class="form-control" @bind-Value="precioVenta" disabled></InputNumber>
                <button type="button" class="btn btn-outline-info" @onclick="AgregarProducto">Agregar</button>
            </div>
        </div>

        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>VentaId</th>
                    <th>ProductoId</th>
                    <th>Nombre</th>
                    <th>Cantidad</th>
                    <th>PrecioVentas</th>
                    <th>SubTotal</th>
                    <th></th>
                </tr>
            </thead>
            <tbody class="bg-white">
                @foreach (var item in ventas.VentasDetalles)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.VentaId</td>
                        <td>@item.ProductoId</td>
                        <td>@item.Nombre</td>
                        <td>@item.Cantidad</td>
                        <td>@item.PrecioVenta</td>
                        <td>@item.SubTotal</td>
                        <td><button type="button" class="btn btn-outline-danger" @onclick="(() => EliminarDetalle(item))">Remover</button></td>
                    </tr>
                }

            </tbody>

        </table>

        <div class="form-group">
            <label for="Balance">Balance</label>
            <InputNumber @bind-Value="ventas.Total" disabled class="form-control"></InputNumber>
        </div>

        <button type="button" class="btn btn-secondary" @onclick="Nuevo">Nuevo</button>
        <button type="submit" class="btn btn-success" @onclick="CalcularTotalDeVenta">Guardar</button>
        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
    </EditForm>
</section>

@code {



    [Parameter]
    public int Id { get; set; }
    private string mensaje { get; set; }
    private string seleccionado { get; set; }
    private int cantidad { get; set; }

    private string nombre = string.Empty;
    private decimal precioVenta = 0;

    public Productos productos { get; set; }

    Ventas ventas = new Ventas();
    List<Productos> MiLista = new List<Productos>();


    protected override void OnInitialized()
    {
        if (Id > 0)
        {
            ventas = ventascontroller.Buscar(Id);
        }
        MiLista = productoscontrollers.GetList(A => true);
        
    }

    private void CargarProducto()
    {
        try
        {
            productos = productoscontrollers.Buscar(Int32.Parse(seleccionado));
            nombre = productos.Nombre;
            precioVenta = productos.PrecioVentas;
        }
        catch (Exception)
        {

            //wefrbrvr
        }
    }

    private void Nuevo()
    {
        this.ventas = new Ventas();
        mensaje = string.Empty;
    }

    private void Guardar()
    {
        if(ventas.VentasDetalles == null)
        {
            mensaje = "La lista esta vacía";
            return;
        }

        if(ventascontroller.Guardar(ventas))
        {
            mensaje = "Guardado correctamente";
            this.ventas = new Ventas();
        }
        else
        {
            mensaje = "No se pudo guardar";
        }
    }

    private void Eliminar()
    {
        if(ventascontroller.Eliminar(ventas.VentaId))
        {
            mensaje = "Eliminado correctamente";
            this.ventas = new Ventas();
        } else
        {
            mensaje = "No se pudo eliminar";
        }
    }

    private void Buscar()
    {
        Ventas busca = ventascontroller.Buscar(ventas.VentaId);
        if (busca != null)
        {
            this.ventas = busca;
            mensaje = "Encontrado correctamente";
        }
        else
        {
            mensaje = "No se pudo encontrar";
        }
    }


    private void AgregarProducto()
    {
        if(ventas.VentasDetalles.Any(A => A.ProductoId == productos.ProductoId))
        {
            mensaje = "Este producto ya esta registrado";
        }
        else
        {
            this.ventas.VentasDetalles.Add(new VentasDetalle
            {
                Id = 0,
                VentaId = ventas.VentaId,
                ProductoId = productos.ProductoId,
                Nombre = productos.Nombre,
                Cantidad = cantidad,
                PrecioVenta = productos.PrecioVentas,
                SubTotal = productos.PrecioVentas * cantidad
            });
            CalcularTotalDeVenta();
        }


    }

    private void CalcularTotalDeVenta()
    {
        decimal total = 0;
        foreach (var item in ventas.VentasDetalles)
        {
            total += item.SubTotal;
        }
        ventas.Total = total;
    }

    private void EliminarDetalle(VentasDetalle detalle)
    {
        try
        {
            ventas.VentasDetalles.Remove(detalle);
        }
        catch (Exception)
        {

            //
        }
    }
}
