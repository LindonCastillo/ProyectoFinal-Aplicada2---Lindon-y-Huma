@page "/ConsultaUsuarios"
@page  "/ConsultaUsuarios/{I:int}"

    <h3>Consulta de Usuario</h3>
    <div class="row">
        <div class="col">
            <input id="desde_date" class="form-control" type="datetime-local" @bind="desdeFecha" />
            <label for="desde_date">Desde</label>
        </div>
        <div class="col">
            <input id="hasta_date" class="form-control" type="datetime-local" @bind="hastaFecha" />
            <label for="hasta_date">Hasta</label>
        </div>

        <div class="col">
            <button class="btn btn-primary" id="filtar_buton" @onclick="filtradoPorFecha">Filtar por Fecha</button>
        </div>

        <div class="col">
            <button class="btn btn-dark" type="button" @onclick="Saltar">Pag. Siguiente</button>
        </div>

        <div class="col">
            <input type="text" id="filtar" class="form-control" placeholder="Criterio" @onfocusin="Filtrar" @onfocusout="Filtrar" @onclick="Filtrar" @bind="Criterio" />
        </div>

        <div class="col">
            <select class="form-control" id="filtro_select" @onclick="Filtrar" @bind="filtro">
                <option value="0">Todos</option>
                <option value="1">Id</option>
                <option value="2">Nombre</option>
                <option value="3">Email</option>
                <option value="4">Nivel de Usuario</option>
                <option value="5">Nombre de usuario</option>
            </select>
        </div>
    </div>
<br />


@if (Lista == null)
{
    <p>No hay datos que mostrar</p>
    return;
}
else
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Email</th>
                <th>Nivel de Usuario</th>
                <th>Fecha de Ingreso</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Lista)
            {
                <tr>
                    <td>@item.UsuarioId</td>
                    <td>@item.NombrePersona</td>
                    <td>@item.EmailUsuario</td>
                    <td>@item.NivelUsuario</td>
                    <td>@item.FechaIngreso.ToString("dd/MM/yyyy")</td>
                    <td><a class="btn btn-outline-info" href="Usuarios/@item.UsuarioId">Ver</a></td>
                </tr>
            }
        </tbody>
    </table>
}

<nav aria-label="...">
    <ul class="pagination pagination-lg">
        @for (int i = 1; i <= totaldepaginas; i++)
        {
            <li class="page-item"><a class="page-link" @onclick="OnInitialized" href="ConsultaUsuarios/@i">@i</a></li>
        }

    </ul>
</nav>

@code {
    List<Usuarios> Lista = new List<Usuarios>();

     [Parameter]
    public int I { get; set; }
    private int Contador { get; set; }
    private int contCiclo { get; set; }

    Paginacion paginacion = new Paginacion();
    public double totaldepaginas { get; set; }
    Contexto Contexto = new Contexto();
    double conteo = 0;

    private string filtro;
    private string Criterio;
    private bool fechaFiltro;

    private void NumSaltar()
    {
        Contador = I - 1;
        Saltar();
    }

    private void Saltar()
    {
        Contador += paginacion.Pagina;
        if(Contador >= totaldepaginas)
        {
            Contador = 0;
        }
        Lista = Contexto.Usuarios
            .Skip(Contador * paginacion.CantidadMostrar)
            .Take(paginacion.CantidadMostrar)
            .ToList();
    }

    protected override void OnInitialized()
    {
        conteo = Contexto.Compras.Count();
        totaldepaginas = Math.Ceiling(conteo/paginacion.CantidadMostrar);
        Lista = usuariocontroller.GetList(p => true);
        this.Lista = Contexto.Usuarios.Take(paginacion.CantidadMostrar).ToList();
        NumSaltar();
    }


   

    DateTime hastaFecha = DateTime.Now;
    DateTime desdeFecha = DateTime.Now;

    public List<Usuarios> listado { get; set; }

    private void filtradoPorFecha()
    {
        try
        {
            Lista = Lista.Where(p => p.FechaIngreso >= desdeFecha && p.FechaIngreso <= p.FechaIngreso).ToList();
        }
        catch (Exception)
        {

            //wey klok
        }

    }

    private void Filtrar()
    {

        try
        {
            int filtroIndex = Int32.Parse(filtro);

            if (Criterio.Trim().Length > 0)
            {
                switch (filtroIndex)
                {
                    //Todos
                    case 0:
                        listado = usuariocontroller.GetList(p => true);
                        Lista = listado;
                        break;
                    //Id
                    case 1:
                        int id = 0;
                        if (int.TryParse(Criterio, out id))
                        {
                            id = Convert.ToInt32(Criterio);
                            listado = usuariocontroller.GetList(p => p.UsuarioId == id);
                            Lista = listado;
                        }
                        break;
                    //Nombre
                    case 2:
                        listado = usuariocontroller.GetList(p => p.NombrePersona.Contains(Criterio));
                        Lista = listado;
                        break;
                    //Email
                    case 3:
                        listado = usuariocontroller.GetList(p => p.EmailUsuario.Contains(Criterio));
                        Lista = listado;
                        break;
                    //NivelUsuario
                    case 4:
                        listado = usuariocontroller.GetList(p => p.NivelUsuario.Contains(Criterio));
                        Lista = listado;
                        break;
                   case 5:
                        listado = usuariocontroller.GetList(p => p.NombreUsuario.Contains(Criterio));
                        Lista = listado;
                        break;
                }
            }
            else
            {

                listado = usuariocontroller.GetList(p => true);
                Lista = listado;
            }
        }
        catch (Exception)
        {
            //algo
        }
    }
}
